{"ast":null,"code":"import { CREATE_ORDER_FAIL, CREATE_ORDER_REQUEST, CREATE_ORDER_SUCCESS, ORDER_DETAIL_FAIL, ORDER_DETAIL_REQUEST, ORDER_DETAIL_SUCCESS, ORDER_PAY_FAIL, ORDER_PAY_REQUEST, ORDER_PAY_RESET, ORDER_PAY_SUCCESS } from '../constants/orderConstants';\nimport axios from 'axios';\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CREATE_ORDER_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //get state of login user\n\n    const config = {\n      //we r sending data to headers in json\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const result = await axios.post(`/api/orders`, order, config);\n    dispatch({\n      type: CREATE_ORDER_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_ORDER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getOrderDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAIL_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //get state of login user\n\n    const config = {\n      //we r sending data to headers in json\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const result = await axios.get(`/api/orders/${id}`, config);\n    dispatch({\n      type: ORDER_DETAIL_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAIL_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["D:/MernStactEcommerce/ecommerce/src/actions/orderAction.js"],"names":["CREATE_ORDER_FAIL","CREATE_ORDER_REQUEST","CREATE_ORDER_SUCCESS","ORDER_DETAIL_FAIL","ORDER_DETAIL_REQUEST","ORDER_DETAIL_SUCCESS","ORDER_PAY_FAIL","ORDER_PAY_REQUEST","ORDER_PAY_RESET","ORDER_PAY_SUCCESS","axios","createOrder","order","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","result","post","payload","data","error","response","message","getOrderDetails","id","get"],"mappings":"AAAA,SACIA,iBADJ,EAEIC,oBAFJ,EAGIC,oBAHJ,EAIKC,iBAJL,EAKIC,oBALJ,EAK0BC,oBAL1B,EAMIC,cANJ,EAOIC,iBAPJ,EAQIC,eARJ,EAQoBC,iBARpB,QASO,6BATP;AAUA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW,OAAOC,QAAP,EAAgBC,QAAhB,KAA6B;AAC/D,MAAI;AACAD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEd;AADD,KAAD,CAAR;AAIA,UAAM;AAACe,MAAAA,SAAS,EAAC;AAACC,QAAAA;AAAD;AAAX,QAAuBH,QAAQ,EAArC,CALA,CAKwC;;AACxC,UAAMI,MAAM,GAAG;AAAE;AACbC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELC,QAAAA,aAAa,EAAE,UAASH,QAAQ,CAACI,KAAM;AAFlC;AADE,KAAf;AAMA,UAAMC,MAAM,GAAG,MAAMZ,KAAK,CAACa,IAAN,CAAY,aAAZ,EAAyBX,KAAzB,EAAgCM,MAAhC,CAArB;AAEAL,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEb,oBADD;AAELsB,MAAAA,OAAO,EAACF,MAAM,CAACG;AAFV,KAAD,CAAR;AAKH,GAnBD,CAmBE,OAAOC,KAAP,EAAc;AACXb,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEf,iBAAR;AAA0BwB,MAAAA,OAAO,EAACE,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeF,IAAf,CAAoBG,OAAtC,GAA8CF,KAAK,CAACC,QAAN,CAAeF,IAAf,CAAoBG,OAAlE,GAA0EF,KAAK,CAACE;AAAlH,KAAD,CAAR;AAEJ;AACJ,CAxBM;AA2BP,OAAO,MAAMC,eAAe,GAAIC,EAAD,IAAQ,OAAOjB,QAAP,EAAgBC,QAAhB,KAA6B;AAChE,MAAI;AACAD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEX;AADD,KAAD,CAAR;AAIA,UAAM;AAACY,MAAAA,SAAS,EAAC;AAACC,QAAAA;AAAD;AAAX,QAAuBH,QAAQ,EAArC,CALA,CAKwC;;AACxC,UAAMI,MAAM,GAAG;AAAE;AACbC,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,UAASH,QAAQ,CAACI,KAAM;AADlC;AADE,KAAf;AAKA,UAAMC,MAAM,GAAG,MAAMZ,KAAK,CAACqB,GAAN,CAAW,eAAcD,EAAG,EAA5B,EAA+BZ,MAA/B,CAArB;AAEAL,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEV,oBADD;AAELmB,MAAAA,OAAO,EAACF,MAAM,CAACG;AAFV,KAAD,CAAR;AAKH,GAlBD,CAkBE,OAAOC,KAAP,EAAc;AACXb,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEZ,iBAAR;AAA0BqB,MAAAA,OAAO,EAACE,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeF,IAAf,CAAoBG,OAAtC,GAA8CF,KAAK,CAACC,QAAN,CAAeF,IAAf,CAAoBG,OAAlE,GAA0EF,KAAK,CAACE;AAAlH,KAAD,CAAR;AAEJ;AACJ,CAvBM","sourcesContent":["import {\r\n    CREATE_ORDER_FAIL,\r\n    CREATE_ORDER_REQUEST,\r\n    CREATE_ORDER_SUCCESS,\r\n     ORDER_DETAIL_FAIL,\r\n    ORDER_DETAIL_REQUEST, ORDER_DETAIL_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_RESET,ORDER_PAY_SUCCESS\r\n} from '../constants/orderConstants'\r\nimport axios from 'axios'\r\nexport const createOrder = (order) => async (dispatch,getState) => {\r\n    try {\r\n        dispatch({\r\n            type: CREATE_ORDER_REQUEST\r\n            \r\n        })\r\n        const {userLogin:{userInfo}}=getState() //get state of login user\r\n        const config = { //we r sending data to headers in json\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization:`Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const result = await axios.post(`/api/orders`,order, config);\r\n\r\n        dispatch({\r\n            type: CREATE_ORDER_SUCCESS,\r\n            payload:result.data\r\n        })\r\n       \r\n    } catch (error) {\r\n         dispatch({ type: CREATE_ORDER_FAIL,payload:error.response && error.response.data.message?error.response.data.message:error.message }) \r\n  \r\n    }\r\n}\r\n\r\n\r\nexport const getOrderDetails = (id) => async (dispatch,getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DETAIL_REQUEST\r\n            \r\n        })\r\n        const {userLogin:{userInfo}}=getState() //get state of login user\r\n        const config = { //we r sending data to headers in json\r\n            headers: {\r\n                Authorization:`Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const result = await axios.get(`/api/orders/${id}`, config);\r\n\r\n        dispatch({\r\n            type: ORDER_DETAIL_SUCCESS,\r\n            payload:result.data\r\n        })\r\n       \r\n    } catch (error) {\r\n         dispatch({ type: ORDER_DETAIL_FAIL,payload:error.response && error.response.data.message?error.response.data.message:error.message }) \r\n  \r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}