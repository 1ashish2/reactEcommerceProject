{"ast":null,"code":"import { CREATE_ORDER_FAIL, CREATE_ORDER_REQUEST, CREATE_ORDER_SUCCESS, ORDER_DETAIL_FAIL, ORDER_DETAIL_REQUEST, ORDER_DETAIL_SUCCESS, ORDER_PAY_FAIL, ORDER_PAY_REQUEST, ORDER_PAY_SUCCESS, ORDER_LIST_FAIL, ORDER_LIST_REQUEST, ORDER_LIST_SUCCESS, ORDER_REQUEST, ORDER_SUCCESS, ORDER_FAIL, ORDER_DELIVER_REQUEST, ORDER_DELIVER_SUCCESS, ORDER_DELIVER_FAIL } from '../constants/orderConstants';\nimport axios from 'axios';\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CREATE_ORDER_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //get state of login user\n\n    const config = {\n      //we r sending data to headers in json\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const result = await axios.post(`/api/orders`, order, config);\n    dispatch({\n      type: CREATE_ORDER_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_ORDER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getOrderDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAIL_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //get state of login user\n\n    const config = {\n      //we r sending data to headers in json\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const result = await axios.get(`/api/orders/${id}`, config);\n    dispatch({\n      type: ORDER_DETAIL_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAIL_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const payOrder = (orderId, paymentResult) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_PAY_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //get state of login user\n\n    const config = {\n      //we r sending data to headers in json\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const result = await axios.put(`/api/orders/${orderId}/pay`, paymentResult, config);\n    dispatch({\n      type: ORDER_PAY_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_PAY_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const orderLists = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //get state of login user\n\n    const config = {\n      //we r sending data to headers in json\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const result = await axios.get(`/api/orders/myorders`, config);\n    dispatch({\n      type: ORDER_LIST_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const allOrderList = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //get state of login user\n\n    const config = {\n      //we r sending data to headers in json\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const result = await axios.get(`/api/orders`, config);\n    dispatch({\n      type: ORDER_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deliverOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DELIVER_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //get state of login user\n\n    const config = {\n      //we r sending data to headers in json\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const result = await axios.put(`/api/orders/${order._id}/deliver`, {}, config);\n    dispatch({\n      type: ORDER_DELIVER_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DELIVER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["D:/MernStactEcommerce/ecommerce/src/actions/orderAction.js"],"names":["CREATE_ORDER_FAIL","CREATE_ORDER_REQUEST","CREATE_ORDER_SUCCESS","ORDER_DETAIL_FAIL","ORDER_DETAIL_REQUEST","ORDER_DETAIL_SUCCESS","ORDER_PAY_FAIL","ORDER_PAY_REQUEST","ORDER_PAY_SUCCESS","ORDER_LIST_FAIL","ORDER_LIST_REQUEST","ORDER_LIST_SUCCESS","ORDER_REQUEST","ORDER_SUCCESS","ORDER_FAIL","ORDER_DELIVER_REQUEST","ORDER_DELIVER_SUCCESS","ORDER_DELIVER_FAIL","axios","createOrder","order","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","result","post","payload","data","error","response","message","getOrderDetails","id","get","payOrder","orderId","paymentResult","put","orderLists","allOrderList","deliverOrder","_id"],"mappings":"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","sourcesContent":["import {\r\n    CREATE_ORDER_FAIL,\r\n    CREATE_ORDER_REQUEST,\r\n    CREATE_ORDER_SUCCESS,\r\n     ORDER_DETAIL_FAIL,\r\n    ORDER_DETAIL_REQUEST, ORDER_DETAIL_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_LIST_FAIL,\r\n    ORDER_LIST_REQUEST,\r\n    ORDER_LIST_SUCCESS,\r\n    ORDER_REQUEST,\r\n    ORDER_SUCCESS,\r\n    ORDER_FAIL,\r\n    ORDER_DELIVER_REQUEST,\r\n    ORDER_DELIVER_SUCCESS,\r\n    ORDER_DELIVER_FAIL\r\n\r\n} from '../constants/orderConstants'\r\nimport axios from 'axios'\r\nexport const createOrder = (order) => async (dispatch,getState) => {\r\n    try {\r\n        dispatch({\r\n            type: CREATE_ORDER_REQUEST\r\n            \r\n        })\r\n        const {userLogin:{userInfo}}=getState() //get state of login user\r\n        const config = { //we r sending data to headers in json\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization:`Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const result = await axios.post(`/api/orders`,order, config);\r\n\r\n        dispatch({\r\n            type: CREATE_ORDER_SUCCESS,\r\n            payload:result.data\r\n        })\r\n       \r\n    } catch (error) {\r\n         dispatch({ type: CREATE_ORDER_FAIL,payload:error.response && error.response.data.message?error.response.data.message:error.message }) \r\n  \r\n    }\r\n}\r\nexport const getOrderDetails = (id) => async (dispatch,getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DETAIL_REQUEST\r\n            \r\n        })\r\n        const {userLogin:{userInfo}}=getState() //get state of login user\r\n        const config = { //we r sending data to headers in json\r\n            headers: {\r\n                Authorization:`Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const result = await axios.get(`/api/orders/${id}`, config);\r\n\r\n        dispatch({\r\n            type: ORDER_DETAIL_SUCCESS,\r\n            payload:result.data\r\n        })\r\n       \r\n    } catch (error) {\r\n         dispatch({ type: ORDER_DETAIL_FAIL,payload:error.response && error.response.data.message?error.response.data.message:error.message }) \r\n  \r\n    }\r\n}\r\n\r\nexport const payOrder= (orderId,paymentResult) => async (dispatch,getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_PAY_REQUEST\r\n            \r\n        })\r\n        const {userLogin:{userInfo}}=getState() //get state of login user\r\n        const config = { //we r sending data to headers in json\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization:`Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const result = await axios.put(`/api/orders/${orderId}/pay`,paymentResult,config);\r\n\r\n        dispatch({\r\n            type: ORDER_PAY_SUCCESS,\r\n            payload:result.data\r\n        })\r\n       \r\n    } catch (error) {\r\n         dispatch({ type: ORDER_PAY_FAIL,payload:error.response && error.response.data.message?error.response.data.message:error.message }) \r\n  \r\n    }\r\n}\r\n\r\nexport const orderLists= () => async (dispatch,getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_REQUEST\r\n            \r\n        })\r\n        const {userLogin:{userInfo}}=getState() //get state of login user\r\n        const config = { //we r sending data to headers in json\r\n            headers: {\r\n                Authorization:`Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const result = await axios.get(`/api/orders/myorders`,config);\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_SUCCESS,\r\n            payload:result.data\r\n        })\r\n       \r\n    } catch (error) {\r\n         dispatch({ type: ORDER_LIST_FAIL,payload:error.response && error.response.data.message?error.response.data.message:error.message }) \r\n  \r\n    }\r\n}\r\n\r\n\r\nexport const allOrderList= () => async (dispatch,getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_REQUEST\r\n            \r\n        })\r\n        const {userLogin:{userInfo}}=getState() //get state of login user\r\n        const config = { //we r sending data to headers in json\r\n            headers: {\r\n                Authorization:`Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const result = await axios.get(`/api/orders`,config);\r\n\r\n        dispatch({\r\n            type: ORDER_SUCCESS,\r\n            payload:result.data\r\n        })\r\n       \r\n    } catch (error) {\r\n         dispatch({ type: ORDER_FAIL,payload:error.response && error.response.data.message?error.response.data.message:error.message }) \r\n  \r\n    }\r\n}\r\n\r\nexport const deliverOrder= (order) => async (dispatch,getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DELIVER_REQUEST\r\n            \r\n        })\r\n        const {userLogin:{userInfo}}=getState() //get state of login user\r\n        const config = { //we r sending data to headers in json\r\n            headers: {\r\n                Authorization:`Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const result = await axios.put(`/api/orders/${order._id}/deliver`,{},config);\r\n\r\n        dispatch({\r\n            type: ORDER_DELIVER_SUCCESS,\r\n            payload:result.data\r\n        })\r\n       \r\n    } catch (error) {\r\n         dispatch({ type: ORDER_DELIVER_FAIL,payload:error.response && error.response.data.message?error.response.data.message:error.message }) \r\n  \r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}