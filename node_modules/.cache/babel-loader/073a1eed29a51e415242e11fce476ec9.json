{"ast":null,"code":"import axios from 'axios';\nimport React from 'react';\nimport { USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_DETAILS_FAIL, USER_DETAILS_SUCCESS, USER_DETAILS_REQUEST, USER_UPDATE_REQUEST, USER_UPDATE_FAIL, USER_UPDATE_RESET, USER_UPDATE_SUCCESS } from \"../constants/userConstants.js\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      //we r sending data to headers in json\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const result = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: result.data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(result.data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      //we r sending data to headers in json\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const result = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: result.data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: result.data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(result.data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getUserDetail = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //get satate of login user\n\n    const config = {\n      //we r sending data to headers in json\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const result = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //get state of login user\n\n    const config = {\n      //we r sending data to headers in json\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const result = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["D:/MernStactEcommerce/ecommerce/src/actions/userAction.js"],"names":["axios","React","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_SUCCESS","USER_DETAILS_REQUEST","USER_UPDATE_REQUEST","USER_UPDATE_FAIL","USER_UPDATE_RESET","USER_UPDATE_SUCCESS","login","email","password","dispatch","type","config","headers","result","post","payload","data","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name","getUserDetail","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport React from 'react'\r\nimport {\r\n    USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS,\r\n    USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS,\r\n    USER_DETAILS_FAIL,USER_DETAILS_SUCCESS,USER_DETAILS_REQUEST,USER_UPDATE_REQUEST,\r\n    USER_UPDATE_FAIL,USER_UPDATE_RESET,USER_UPDATE_SUCCESS\r\n} from \"../constants/userConstants.js\"\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type:USER_LOGIN_REQUEST\r\n        })\r\n\r\n        const config = { //we r sending data to headers in json\r\n            headers: {\r\n                'Content-Type':'application/json'\r\n            }\r\n        }\r\n        const result = await axios.post('/api/users/login', { email, password }, config);\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload:result.data\r\n        })\r\n        localStorage.setItem('userInfo',JSON.stringify(result.data))\r\n    } catch (error) {\r\n         dispatch({ type: USER_LOGIN_FAIL,payload:error.response && error.response.data.message?error.response.data.message:error.message }) \r\n  \r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({\r\n        type: USER_LOGOUT,  \r\n    })\r\n}\r\n\r\nexport const register = (name,email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type:USER_REGISTER_REQUEST\r\n        })\r\n\r\n        const config = { //we r sending data to headers in json\r\n            headers: {\r\n                'Content-Type':'application/json'\r\n            }\r\n        }\r\n        const result = await axios.post('/api/users', { name,email, password }, config);\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload:result.data\r\n        })\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload:result.data\r\n        })\r\n        localStorage.setItem('userInfo',JSON.stringify(result.data))\r\n    } catch (error) {\r\n         dispatch({ type: USER_REGISTER_FAIL,payload:error.response && error.response.data.message?error.response.data.message:error.message }) \r\n  \r\n    }\r\n}\r\n\r\n\r\nexport const getUserDetail = (id) => async (dispatch,getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n            \r\n        })\r\n        const {userLogin:{userInfo}}=getState() //get satate of login user\r\n        const config = { //we r sending data to headers in json\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization:`Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const result = await axios.get(`/api/users/${id}`, config);\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload:result.data\r\n        })\r\n       \r\n    } catch (error) {\r\n         dispatch({ type: USER_DETAILS_FAIL,payload:error.response && error.response.data.message?error.response.data.message:error.message }) \r\n  \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const updateUserProfile = (user) => async (dispatch,getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_REQUEST\r\n            \r\n        })\r\n        const {userLogin:{userInfo}}=getState() //get state of login user\r\n        const config = { //we r sending data to headers in json\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization:`Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const result = await axios.get(`/api/users/${id}`, config);\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_SUCCESS,\r\n            payload:result.data\r\n        })\r\n       \r\n    } catch (error) {\r\n         dispatch({ type: USER_UPDATE_FAIL,payload:error.response && error.response.data.message?error.response.data.message:error.message }) \r\n  \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}