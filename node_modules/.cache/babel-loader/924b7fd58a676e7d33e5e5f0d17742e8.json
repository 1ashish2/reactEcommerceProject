{"ast":null,"code":"var _jsxFileName = \"D:\\\\MernStactEcommerce\\\\ecommerce\\\\src\\\\screens\\\\ProductEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { listSingleProduct, updateProduct } from \"../actions/productActions\";\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport FormContainer from '../components/FormContainer';\nimport { PRODUCT_UPDATE_RESET } from \"../constants/productConstants\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ProductEditScreen = props => {\n  _s();\n\n  const productId = props.match.params.id;\n  const [name, setName] = useState('');\n  const [price, setPrice] = useState(0);\n  const [image, setImage] = useState('');\n  const [brand, setBrand] = useState('');\n  const [category, setCategory] = useState('');\n  const [countInStock, setCountInStock] = useState(0);\n  const [description, setDescription] = useState('');\n  const [uploading, setUploading] = useState(false);\n  const dispatch = useDispatch();\n  const productDetail = useSelector(state => state.productDetail);\n  const {\n    loading,\n    error,\n    product\n  } = productDetail;\n  const productUpdate = useSelector(state => state.productUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = productUpdate;\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: PRODUCT_UPDATE_RESET\n      });\n      props.history.push('/admin/productlist');\n    } else {\n      if (product) {\n        if (!product.name || product._id !== productId) {\n          dispatch(listSingleProduct(productId));\n        } else {\n          setName(product.name);\n          setBrand(product.brand);\n          setDescription(product.description);\n          setCategory(product.category);\n          setCountInStock(product.countInStock);\n          setImage(product.image);\n          setPrice(product.price);\n        }\n      }\n    }\n  }, [dispatch, props.history, product, productId, successUpdate]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(updateProduct({\n      _id: productId,\n      name,\n      price,\n      brand,\n      category,\n      description,\n      countInStock,\n      image\n    }));\n  };\n\n  const uploadFileHandler = async e => {\n    const file = e.target.files[0]; // sigle file to upload because we get array\n\n    const formData = new FormData();\n    formData.append('image', file);\n    setUploading(true);\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      };\n      const result = await axios.post('/api/upload', formData, config);\n      setImage(result.data);\n      console.log(result.data);\n      setUploading(false);\n    } catch (error) {\n      console.log(error);\n      setUploading(false);\n    }\n  };\n\n  const uploadImageHandler = () => {\n    console.log(\"upload\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/productlist\",\n      className: \"btn btn-dark my-3\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 35\n      }, this), errorUpdate && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: errorUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 36\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 28\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 49\n      }, this) : /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"my-2\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"my-2\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"number\",\n            placeholder: \"Enter price\",\n            value: price,\n            onChange: e => setPrice(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"image\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter image url\",\n            value: image,\n            onChange: e => setImage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.File, {\n            id: \"image-file\",\n            onChange: uploadFileHandler,\n            custom: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"btn-sm my-2\",\n            variant: \"primary\",\n            onClick: uploadImageHandler,\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 30\n          }, this), uploading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"brand\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Brand\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter brand\",\n            value: brand,\n            onChange: e => setBrand(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"countInStock\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"CountInStock\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"number\",\n            placeholder: \"Enter countInStock \",\n            value: countInStock,\n            onChange: e => setCountInStock(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"category\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter category \",\n            value: category,\n            onChange: e => setCategory(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"description\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter description \",\n            value: description,\n            onChange: e => setDescription(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: \"my-2\",\n          variant: \"primary\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProductEditScreen, \"gvc/2XEYdqdF8vMf69Hz4GexCF0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ProductEditScreen;\nexport default ProductEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductEditScreen\");","map":{"version":3,"sources":["D:/MernStactEcommerce/ecommerce/src/screens/ProductEditScreen.js"],"names":["React","useState","useEffect","Link","Form","Button","useDispatch","useSelector","listSingleProduct","updateProduct","Loader","Message","FormContainer","PRODUCT_UPDATE_RESET","axios","ProductEditScreen","props","productId","match","params","id","name","setName","price","setPrice","image","setImage","brand","setBrand","category","setCategory","countInStock","setCountInStock","description","setDescription","uploading","setUploading","dispatch","productDetail","state","loading","error","product","productUpdate","loadingUpdate","errorUpdate","success","successUpdate","type","history","push","_id","submitHandler","e","preventDefault","uploadFileHandler","file","target","files","formData","FormData","append","config","headers","result","post","data","console","log","uploadImageHandler","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form,Button } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { listSingleProduct,updateProduct} from \"../actions/productActions\"\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport FormContainer from '../components/FormContainer';\r\nimport {PRODUCT_UPDATE_RESET} from \"../constants/productConstants\"\r\nimport axios from 'axios';\r\n\r\n\r\nconst ProductEditScreen = (props) => {\r\n    const productId = props.match.params.id;\r\n    const[name,setName]=useState('')\r\n    const [price, setPrice] = useState(0)\r\n    const [image, setImage] = useState('')\r\n    const [brand, setBrand] = useState('')\r\n    const [category, setCategory] = useState('')\r\n    const [countInStock, setCountInStock] = useState(0)\r\n    const [description, setDescription] = useState('')\r\n    const [uploading, setUploading] = useState(false)\r\n    const dispatch = useDispatch();\r\n    const productDetail = useSelector(state => state.productDetail)\r\n    const { loading, error, product } = productDetail;\r\n\r\n    const productUpdate = useSelector(state => state.productUpdate)\r\n    const { loading:loadingUpdate, error:errorUpdate, success:successUpdate } = productUpdate;\r\n    \r\n    useEffect(() => {\r\n        if (successUpdate) {\r\n            dispatch({ type: PRODUCT_UPDATE_RESET })\r\n            props.history.push('/admin/productlist')\r\n        } else {\r\n             if (product) {\r\n           if (!product.name || product._id !== productId) {\r\n           dispatch(listSingleProduct(productId)) \r\n        } else {\r\n            setName(product.name)\r\n               setBrand(product.brand)\r\n               setDescription(product.description)\r\n               setCategory(product.category)\r\n               setCountInStock(product.countInStock)\r\n               setImage(product.image)\r\n               setPrice(product.price)\r\n        } \r\n        }\r\n       }\r\n            \r\n     \r\n    },[dispatch,props.history,product,productId,successUpdate])\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateProduct({\r\n            _id: productId,\r\n            name,\r\n            price,\r\n            brand,\r\n            category,\r\n            description,\r\n            countInStock,\r\n            image\r\n      }))\r\n        \r\n    }\r\n    const uploadFileHandler = async(e) => {\r\n        const file = e.target.files[0] // sigle file to upload because we get array\r\n        const formData = new FormData()\r\n        formData.append('image', file)\r\n        setUploading(true)\r\n        \r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type':'multipart/form-data'\r\n                }\r\n            }\r\n\r\n            const result = await axios.post('/api/upload', formData, config)\r\n            \r\n            setImage(result.data)\r\n            console.log(result.data)\r\n            setUploading(false)\r\n        } catch (error) {\r\n            console.log(error)\r\n            setUploading(false)\r\n        }\r\n    }\r\n    const uploadImageHandler = () => {\r\n        console.log(\"upload\")\r\n    }\r\n    return (\r\n        <>\r\n            <Link to='/admin/productlist' className=\"btn btn-dark my-3\">Go Back</Link>\r\n            <FormContainer>\r\n            <h1>Edit Product</h1>\r\n                {loadingUpdate && <Loader />}\r\n                {\r\n                    errorUpdate && <Message variant='danger'>{errorUpdate}</Message>\r\n                }\r\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message> :\r\n                    <Form onSubmit={submitHandler}>\r\n                        <Form.Group className=\"my-2\">\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control\r\n                                type='text'\r\n                                placeholder='Enter name'\r\n                                value={name} onChange={(e) => setName(e.target.value)}>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"my-2\">\r\n                            <Form.Label>price</Form.Label>\r\n                            <Form.Control\r\n                                type='number'\r\n                                placeholder='Enter price'\r\n                                value={price} onChange={(e) => setPrice(e.target.value)}>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"image\">\r\n                           <Form.Label>Image</Form.Label>\r\n                            <Form.Control\r\n                                type='text'\r\n                                placeholder='Enter image url'\r\n                                value={image} onChange={(e) => setImage(e.target.value)}>\r\n                            </Form.Control>\r\n                            <Form.File\r\n                                id=\"image-file\"\r\n                                onChange={uploadFileHandler}\r\n                                custom\r\n                                />\r\n                             <Button  className=\"btn-sm my-2\" variant='primary' onClick={uploadImageHandler} >Upload</Button>\r\n                            {uploading && <Loader />}\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"brand\">\r\n                           <Form.Label>Brand</Form.Label>\r\n                            <Form.Control\r\n                                type='text'\r\n                                placeholder='Enter brand'\r\n                                value={brand} onChange={(e) => setBrand(e.target.value)}>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"countInStock\">\r\n                           <Form.Label>CountInStock</Form.Label>\r\n                            <Form.Control\r\n                                type='number'\r\n                                placeholder='Enter countInStock '\r\n                                value={countInStock} onChange={(e) => setCountInStock(e.target.value)}>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"category\">\r\n                           <Form.Label>Category</Form.Label>\r\n                            <Form.Control\r\n                                type='text'\r\n                                placeholder='Enter category '\r\n                                value={category} onChange={(e) => setCategory(e.target.value)}>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"description\">\r\n                           <Form.Label>Description</Form.Label>\r\n                            <Form.Control\r\n                                type='text'\r\n                                placeholder='Enter description '\r\n                                value={description} onChange={(e) => setDescription(e.target.value)}>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                       \r\n                        <Button type=\"submit\" className=\"my-2\" variant='primary' >Update</Button>\r\n                    </Form>\r\n                }\r\n            </FormContainer>\r\n            </>\r\n       \r\n    )\r\n}\r\n\r\nexport default ProductEditScreen;\r\n"]},"metadata":{},"sourceType":"module"}